[{"content":"flutter apps wont run code when the screen is not active or phone is locked if you switch to different app your flutter app will stop running. so incase you want to trigger a function at certain time or lets say you have a weather app and you want to update weather every one hour automatically you can do that using android alarm manager package.\nFirst I created flutter demo project. inside it i have a switch button at the center to start and stop the alarm timer. you can download the starter files from this GitHub link.\nopen your pubsepec.yml file and paste the given android alarm manager package name under dependencies\nandroid_alarm_manager: ^0.4.5+20 after that you need paste the following lines to your AndroidManifest.xml file within the \u0026lt;manifest\u0026gt;\u0026lt;/manifest\u0026gt; tags\n\u0026lt;uses-permission android:name=\u0026#34;android.permission.RECEIVE_BOOT_COMPLETED\u0026#34;/\u0026gt; \u0026lt;uses-permission android:name=\u0026#34;android.permission.WAKE_LOCK\u0026#34;/\u0026gt; Next add these lines inside application tag\n\u0026lt;service android:name=\u0026#34;io.flutter.plugins.androidalarmmanager.AlarmService\u0026#34; android:permission=\u0026#34;android.permission.BIND_JOB_SERVICE\u0026#34; android:exported=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;receiver android:name=\u0026#34;io.flutter.plugins.androidalarmmanager.AlarmBroadcastReceiver\u0026#34; android:exported=\u0026#34;false\u0026#34;/\u0026gt; \u0026lt;receiver android:name=\u0026#34;io.flutter.plugins.androidalarmmanager.RebootBroadcastReceiver\u0026#34; android:enabled=\u0026#34;false\u0026#34;\u0026gt; \u0026lt;intent-filter\u0026gt; \u0026lt;action android:name=\u0026#34;android.intent.action.BOOT_COMPLETED\u0026#34;\u0026gt;\u0026lt;/action\u0026gt; \u0026lt;/intent-filter\u0026gt; \u0026lt;/receiver\u0026gt; now lets move on to next step. To work with alarm manager import android alarm manager inside main.dart file.\nimport \u0026#39;package:android_alarm_manager/android_alarm_manager.dart\u0026#39;; before setting any alarms first we need to Initialize android alarm manager service we can do that in many ways one way of initializing android manager is calling AndroidAlarmManager.initialize() function inside apps main function. make sure it runs as an asynchronous function.\nvoid main() async { runApp(MyApp()); await AndroidAlarmManager.initialize(); } restart your app if the alarm manager is initialized you will get \u0026quot;Alarm service started\u0026quot; message in the console. if you get any errors stop the app and run it again.\nInside switch button on changed method we are going to call the alarm manager timer functions. so when the switch turns on I want to set an alarm timer. there are three types of alarm timers oneshot, oneshotAt, Periodic I will explain how to use them and explain different between each timers.\noneShot Alarm Timer It takes three parameters first is delay we need to specify a Duration of delay for the callback function to start. then id will take a integer value it is used to identify the timer and we can cancel and replace existing timers. then callback it must be a top level function or a static method from a class.\nfirst for delay I am giving a 10 seconds. next create a integer for id, lets call it alarmId add 1 to it\u0026rsquo;s value. int alarmID = 1; for the callback create a top level function. a top level function are functions that defined outside class. lets call it fireAlarm\nvoid fireAlarm() { print(\u0026#39;Alarm Fired at ${DateTime.now()}\u0026#39;); } The print statement inside the curly braces will print current time when the alarm fires.\nclass _HomePageState extends State\u0026lt;HomePage\u0026gt; { bool isOn = false; // your code  int alarmId = 1; // your code  @override Widget build(BuildContext context) { return Scaffold( body: Center( child: Transform.scale( scale: 2, child: Switch( value: isOn, onChanged: (value) { setState(() { isOn = value; }); // your code  AndroidAlarmManager.oneShot( Duration(seconds: 5), alarmId, fireAlarm, ); // your code  }, ), ), ), ); } } void fireAlarm() { print(\u0026#39;Alarm Fired at ${DateTime.now()}\u0026#39;); } to test it turn on the switch button. if everything goes correct you will see print statement of the fireAlarm function. along with the required parameters we can also add few more parameters, by setting alarmClock to true callback function will run as a Android Alarm. and if wakeup is set to true device will wake up when callback function runs.\nCancel Alarm Timers after setting the alarm timers we need to cancel them as well. for that we can use AndroidAlarmManager.cancel() method. you need give a alarm id for this method to work.\nSwitch( value: isOn, onChanged: (value) { setState(() { isOn = value; }); if (isOn == true) { AndroidAlarmManager.periodic( Duration(seconds: 60), alarmId, fireAlarm); } else { AndroidAlarmManager.cancel(alarmId); print(\u0026#39;Alarm Timer Canceled\u0026#39;); } }, ), oneShotAt Alarm Timer this method works slightly different. oneShotAt function schedules one shot timer to run call back at certain time so instead of delay duration it requires a Date and Time. add a DateTime() object inside parenthesis i am adding a time that is 30 seconds from now. you can give the values according to your time of practicing this tutorial.\nDateTime(2021,03,02,15,47,30)\nyou can keep other parameters as they are.\nclass _HomePageState extends State\u0026lt;HomePage\u0026gt; { bool isOn = false; int alarmId = 1; @override Widget build(BuildContext context) { return Scaffold( body: Center( child: Transform.scale( scale: 2, child: Switch( value: isOn, onChanged: (value) { setState(() { isOn = value; }); if (isOn == true) { // your code  AndroidAlarmManager.oneShotAt( DateTime(2021, 03, 02, 15, 47, 30), alarmId, fireAlarm, // your code  ); } else { AndroidAlarmManager.cancel(alarmId); print(\u0026#39;Alarm Timer Canceled\u0026#39;); } }, ), ), ), ); } } void fireAlarm() { print(\u0026#39;Alarm Fired at ${DateTime.now()}\u0026#39;); } Periodic Alarm Timer Now lets see the third type of Timer function which is Periodic . it will take a Duration parameter and runs the callback function periodically for the given duration. so add a Duration object and give 60 seconds to its value. you cant run the method for less than 60 seconds interval. if you give a value of less than 60 seconds it will run the callback with 60 seconds interval.\nclass _HomePageState extends State\u0026lt;HomePage\u0026gt; { bool isOn = false; int alarmId = 1; @override Widget build(BuildContext context) { return Scaffold( body: Center( child: Transform.scale( scale: 2, child: Switch( value: isOn, onChanged: (value) { setState(() { isOn = value; }); if (isOn == true) { AndroidAlarmManager.periodic( Duration(seconds: 60), alarmId, fireAlarm); } else { AndroidAlarmManager.cancel(alarmId); print(\u0026#39;Alarm Timer Canceled\u0026#39;); } }, ), ), ), ); } } void fireAlarm() { print(\u0026#39;Alarm Fired at ${DateTime.now()}\u0026#39;); } if you prefer to watch video tutorial, you can watch this tutorial as a video here\nhttps://www.youtube.com/watch?v=F3qE6cLQk2I\n","permalink":"https://tonydavidx.github.io/posts/post_1/","summary":"flutter apps wont run code when the screen is not active or phone is locked if you switch to different app your flutter app will stop running. so incase you want to trigger a function at certain time or lets say you have a weather app and you want to update weather every one hour automatically you can do that using android alarm manager package.\nFirst I created flutter demo project.","title":"How to Run Background Tasks in Flutter"}]